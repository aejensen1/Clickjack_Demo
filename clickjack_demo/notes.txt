Clickjacking Demo 11-6-2023
Anders Jensen
Notes.txt


Droplet IP Address: 164.90.136.6

OWASP Information about clickjacking. How to test a site for clickjacking vulnerabilities:
https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/09-Testing_for_Clickjacking

'Anti-CSRF' refers to protection against Cross-Site Request Forgery (CSRF) attacks

Storing PHP files on Digital Ocean Droplet in folder /var/www/html/

-----------------------------------------------------

Enumeration:

-clickjacking_tester.php tests if a website is vulnerable to being inserted into an iframe (for clickjacking)
 -http://gmail.com is not vulnerable to clickjacking
 -http://164.90.136.6/transfer.php is vulnerable to clickjacking

-Normally a user would access transfer.php by first going to http://164.90.136.6/submit.html
-An attacker could set the account and amount values in the get request, as that is not verified!

----------------------------------------------------

Exploit:

On http://164.90.136.6/attackerSite.html :

-The attacker can now create their own website with the vulnerable site in an iframe, hidden with CSS.
 -The iframe has the account and amount values already set using the url 
 -The attacker can overlay a non-malicious looking website on top and place an enticing button right on top of the transfer button
 
-Nothing happens?!? User unknowingly just transferred money to the attacker

----------------------------------------------------

Prevention methods:

CSRF prevention cheat sheet: https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html 

-insecure code is in transfer.php
-secure code is in transfer-secure.php
-secure code added has a "Secure Coding Practice" comment above

1. Implement Frame Buster Script: Embedding a frame buster script in your confirmation_page.php can prevent the page from being loaded within an iframe.
This script checks if the page is the top-level window and redirects if it's not.

<script type="text/javascript">
    if (top !== self) {
        top.location = self.location;
    }
</script>



2. X-Frame-Options HTTP Response Header: used to indicate whether or not a browser should be allowed to render a page in a <frame> , <iframe> , 
<embed> or <object>.

 <?php
header('X-Frame-Options: DENY');
?>

3. Anti-CSRF token checks (already implemented): Whenever a user invokes critical operations, a request generated by the browser must 
include the associated CSRF token. This will be used by the application server to verify the legitimacy of the end-user request. 
The application server rejects the request if the CSRF token fails to match the test.

4. Disallow writing of parameters through the GET method. This could be accomplished by having all the inputs on the same page instead of redirecting.
